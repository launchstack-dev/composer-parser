[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "composer-parser"
dynamic = ["version"]
description = "A Python library for parsing and backtesting Composer.trade strategies"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Jensen Carlsen", email = "jensen@example.com"}
]
maintainers = [
    {name = "Jensen Carlsen", email = "jensen@example.com"}
]
keywords = [
    "composer",
    "trading",
    "strategy",
    "backtesting",
    "financial",
    "investment",
    "algorithmic-trading",
    "technical-analysis",
    "portfolio-management"
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Financial and Insurance Industry",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Office/Business :: Financial :: Investment",
    "Topic :: Scientific/Engineering :: Information Analysis",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
requires-python = ">=3.8"
dependencies = [
    "yfinance>=0.2.0",
    "pandas>=1.5.0",
    "pandas-ta>=0.3.0",
    "numpy>=1.21.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "black>=22.0.0",
    "flake8>=5.0.0",
    "mypy>=1.0.0",
    "pre-commit>=2.20.0",
]
docs = [
    "sphinx>=5.0.0",
    "sphinx-rtd-theme>=1.0.0",
    "myst-parser>=0.18.0",
]
test = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.8.0",
]

[project.urls]
Homepage = "https://github.com/jensencarlsen/composer-parser"
Documentation = "https://github.com/jensencarlsen/composer-parser#readme"
Repository = "https://github.com/jensencarlsen/composer-parser"
"Bug Tracker" = "https://github.com/jensencarlsen/composer-parser/issues"
"Source Code" = "https://github.com/jensencarlsen/composer-parser"

[tool.setuptools.dynamic]
version = {attr = "composer_parser.__version__"}

[tool.setuptools.packages.find]
where = ["."]
include = ["composer_parser*"]
exclude = ["tests*"]

[tool.black]
line-length = 88
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["composer_parser"]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "yfinance.*",
    "pandas.*",
    "pandas_ta.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["composer_parser"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.flake8]
max-line-length = 88
extend-ignore = ["E203", "W503"]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    ".venv",
    "venv",
    ".eggs",
    "*.egg",
]

[tool.pre-commit]
repos = [
    { repo = "https://github.com/pre-commit/pre-commit-hooks", rev = "v4.4.0", hooks = [
        {id = "trailing-whitespace"},
        {id = "end-of-file-fixer"},
        {id = "check-yaml"},
        {id = "check-added-large-files"},
        {id = "check-merge-conflict"},
    ]},
    { repo = "https://github.com/psf/black", rev = "23.3.0", hooks = [{id = "black"}] },
    { repo = "https://github.com/pycqa/isort", rev = "5.12.0", hooks = [{id = "isort"}] },
    { repo = "https://github.com/pycqa/flake8", rev = "6.0.0", hooks = [{id = "flake8"}] },
] 